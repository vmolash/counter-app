{"version":3,"sources":["Counter.js","AddCounterForm.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","id","name","count","onClick","decrement","increment","remove","AddCounterForm","useState","setName","setCount","type","value","onChange","e","target","onSubmit","Number","App","counters","setCounters","incrementCounter","console","log","index","findIndex","el","newCounters","decrementCounter","map","removeCounter","filter","reduce","acc","cur","key","newCounter","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mNAkBeA,MAff,SAAiBC,GACf,OACE,2CACa,gCAASA,EAAMC,IAD5B,gBAEe,gCAASD,EAAME,MAF9B,iBAGgB,gCAASF,EAAMG,OAE3B,4BAAQC,QAAU,kBAAMJ,EAAMK,UAAUL,EAAMC,MAA9C,KACA,4BAAQG,QAAU,kBAAMJ,EAAMM,UAAUN,EAAMC,MAA9C,KACA,4BAAQG,QAAU,kBAAMJ,EAAMO,OAAOP,EAAMC,MAA3C,YCYOO,MArBf,SAAwBR,GAAQ,IAAD,EACHS,mBAAS,QADN,mBACpBP,EADoB,KACdQ,EADc,OAEDD,mBAAS,IAFR,mBAEpBN,EAFoB,KAEbQ,EAFa,KAU7B,OACE,6BACI,2BAAOC,KAAK,OAAOV,KAAK,OAAOW,MAAOX,EAAMY,SAAW,SAAAC,GAAC,OAAIL,EAAQK,EAAEC,OAAOH,UAC7E,2BAAOD,KAAK,SAASV,KAAK,QAAQW,MAAOV,EAAOW,SAAW,SAAAC,GAAC,OAAIJ,EAASI,EAAEC,OAAOH,UAEpF,4BAAQT,QAAU,kBAVhBJ,EAAMiB,SAASf,EAAMgB,OAAOf,IAC5BO,EAAQ,SACRC,EAAS,KAQX,YCmDSQ,MAhEf,WACI,IADW,EAQqBV,mBAPH,CACzB,CAAER,GAAI,IAAKC,KAAK,YAAaC,MAAO,GACpC,CAAEF,GAAI,IAAKC,KAAK,YAAaC,MAAO,GACpC,CAAEF,GAAI,IAAKC,KAAK,YAAaC,MAAO,GACpC,CAAEF,GAAI,IAAKC,KAAK,YAAaC,MAAO,MAL7B,mBAQJiB,EARI,KAQMC,EARN,KAgBLC,EAAmB,SAACrB,GACtBsB,QAAQC,IAAI,OAASvB,GACrB,IAAMwB,EAAQL,EAASM,WAAU,SAAAC,GAAE,OAAIA,EAAG1B,KAAOA,KAC3C2B,EAAW,YAAOR,GACxBQ,EAAYH,GAAOtB,MAAQyB,EAAYH,GAAOtB,MAAQ,EACtDkB,EAAYO,IAEVC,EAAmB,SAAC5B,GACtBsB,QAAQC,IAAI,OAASvB,GACrB,IAAM2B,EAAcR,EAASU,KAAI,SAAAH,GAC7B,OAAGA,EAAG1B,KAAOA,EAAW,eAAI0B,EAAX,CAAexB,MAAOwB,EAAGxB,MAAQ,IAC3CwB,KAEXN,EAAYO,IAEVG,EAAgB,SAAC9B,GACnB,IAAM2B,EAAcR,EAASY,QAAO,SAAAL,GAAE,OAAIA,EAAG1B,KAAMA,KACnDoB,EAAYO,IAYlB,OACE,6BACI,uCADJ,UAEYR,EAASa,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,EAAIhC,QAAO,GACvD,4BAAQC,QAvCY,WACpBmB,QAAQC,IAAI,kBACZ,IAAMI,EAAcR,EAASU,KAAI,SAAAH,GAAE,sBAAUA,EAAV,CAAcxB,MAAO,OACxDkB,EAAYO,KAoCZ,qBACA,6BACCR,EAASU,KAAI,SAAAH,GAAE,OAAI,kBAAC,EAAD,CAASS,IAAKT,EAAG1B,GACRA,GAAI0B,EAAG1B,GACPC,KAAMyB,EAAGzB,KACTC,MAAOwB,EAAGxB,MACVG,UAAWgB,EACXjB,UAAWwB,EACXtB,OAAQwB,OACrC,kBAAC,EAAD,CAAgBd,SAvBD,SAACf,EAAMC,GACtB,IAAMkC,EAAU,sBAAOjB,GAAP,CAAiB,CAC7BnB,GAAIqC,KAAKC,SACTrC,OACAC,MAAOe,OAAOf,MAElBkB,EAAYgB,QClCAG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.79436bd4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Counter(props) {\n  return (\n    <div>\n      Counter ID <strong>{props.id}</strong>\n      Counter name <strong>{props.name}</strong>\n      Counter value <strong>{props.count}</strong>\n\n        <button onClick={ () => props.decrement(props.id) }>-</button>\n        <button onClick={ () => props.increment(props.id) }>+</button>\n        <button onClick={ () => props.remove(props.id) }>Delete</button>\n\n    </div>\n  );\n}\n\nexport default Counter;\n","import React, {useState} from 'react';\nimport './App.css';\n\nfunction AddCounterForm(props) {\n    const [name, setName] = useState('----');\n    const [count, setCount] = useState(45);\n\n    const onSubmit = () => {\n        props.onSubmit(name, Number(count));\n        setName('');\n        setCount(0);\n    };\n\n  return (\n    <div>\n        <input type=\"text\" name='name' value={name} onChange={ e => setName(e.target.value)} />\n        <input type=\"number\" name='count' value={count} onChange={ e => setCount(e.target.value)}/>\n\n      <button onClick={ () => onSubmit(name, count)}>Create</button>\n\n    </div>\n  );\n}\n\nexport default AddCounterForm;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from \"./Counter\";\nimport AddCounterForm from \"./AddCounterForm\";\n\nfunction App() {\n    const InitialCountersState = [\n        { id: 123, name:'Counter 1', count: 2 },\n        { id: 124, name:'Counter 2', count: 5 },\n        { id: 125, name:'Counter 3', count: 8 },\n        { id: 126, name:'Counter 4', count: 48 }\n    ];\n\n    const [counters, setCounters] = useState(InitialCountersState);\n\n    const resetTotalCount = () => {\n        console.log('Hello function');\n        const newCounters = counters.map(el => ( {...el, count: 0} ) );\n        setCounters(newCounters);\n    };\n\n    const incrementCounter = (id) => {\n        console.log('inc ' + id);\n        const index = counters.findIndex(el => el.id === id);\n        const newCounters = [...counters];\n        newCounters[index].count = newCounters[index].count + 1;\n        setCounters(newCounters);\n    };\n    const decrementCounter = (id) => {\n        console.log('dec ' + id);\n        const newCounters = counters.map(el => {\n            if(el.id === id) return {...el, count: el.count - 1 };\n            return el;\n        });\n        setCounters(newCounters);\n    };\n    const removeCounter = (id) => {\n        const newCounters = counters.filter(el => el.id !==id);\n        setCounters(newCounters);\n    };\n    const addCounter = (name, count) => {\n        const newCounter = [...counters, {\n            id: Math.random(),\n            name,\n            count: Number(count)\n        }];\n        setCounters(newCounter);\n\n    };\n\n  return (\n    <div>\n        <h1>Counter</h1>\n        Total: {counters.reduce((acc, cur) => acc + cur.count, 0)}\n        <button onClick={resetTotalCount}>Reset total count</button>\n        <hr/>\n        {counters.map(el => <Counter key={el.id}\n                                     id={el.id}\n                                     name={el.name}\n                                     count={el.count}\n                                     increment={incrementCounter}\n                                     decrement={decrementCounter}\n                                     remove={removeCounter} />)}\n        <AddCounterForm onSubmit={addCounter} />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}